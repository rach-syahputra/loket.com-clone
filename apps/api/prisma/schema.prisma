// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CouponStatus {
  ACTIVE
  USED
  EXPIRED
}

enum TicketType {
  PAID
  FREE
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  pictureUrl   String?  @map("picture_url")
  name         String
  referralCode String   @unique @map("referral_code")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  UserRoles    UserRole[]
  Event        Event[]
  Review       Review[]
  Transactions Transactions[]
  Coupon       Coupon[]

  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  UserRoles UserRole[]

  @@map("roles")
}

model UserRole {
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  isActive  Boolean  @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role Role @relation(fields: [roleId], references: [id], onUpdate: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Coupon {
  id             Int          @id @default(autoincrement())
  userId         Int          @map("user_id")
  discountAmount Int          @map("discount_amount")
  expiryDate     DateTime     @map("expiry_date")
  status         CouponStatus
  createdAt      DateTime     @default(now()) @map("created_at")

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Transactions Transactions[]

  @@map("coupons")
}

model Province {
  id   Int    @id @default(autoincrement())
  name String

  Location Location[]

  @@map("provinces")
}

model Location {
  id            Int      @id @default(autoincrement())
  streetAddress String   @map("street_address") @db.Text
  city          String
  provinceId    Int      @map("province_id")
  createdAt     DateTime @default(now()) @map("created_at")

  province Province @relation(fields: [provinceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Event    Event[]

  @@map("locations")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  Event Event[]

  @@map("categories")
}

model Event {
  id                    Int        @id @default(autoincrement())
  slug                  String     @unique
  title                 String
  description           String     @db.Text
  bannerUrl             String     @map("banner_url")
  registrationStartDate DateTime   @map("registration_start_date")
  registrationEndDate   DateTime   @map("registration_end_date")
  eventStartDate        DateTime   @map("event_start_date")
  eventEndDate          DateTime   @map("event_end_date")
  eventStartTime        String     @default("00:00") @map("event_start_time")
  eventEndTime          String     @default("00:00") @map("event_end_time")
  price                 Int
  availableSeats        Int        @map("available_seats")
  locationId            Int        @map("location_id")
  categoryId            Int        @map("category_id")
  ticketType            TicketType @map("ticket_type")
  organizerId           Int        @map("organizer_id")
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")

  location     Location       @relation(fields: [locationId], references: [id], onUpdate: Cascade)
  category     Category       @relation(fields: [categoryId], references: [id], onUpdate: Cascade)
  organizer    User           @relation(fields: [organizerId], references: [id], onUpdate: Cascade)
  Voucher      Voucher[]
  Review       Review[]
  Transactions Transactions[]

  @@map("events")
}

model Voucher {
  id             Int      @id @default(autoincrement())
  title          String 
  eventId        Int      @map("event_id")
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  discountAmount Int      @map("discount_amount")
  createdAt      DateTime @default(now()) @map("created_at")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Transactions Transactions[]

  @@map("vouchers")
}

enum ReviewStatus {
  DRAFT
  SUBMITTED
}

model Review {
  id             Int           @id @default(autoincrement())
  transactionId  Int           @unique // ✅ Required foreign key
  userId         Int           @map("user_id")
  eventId        Int           @map("event_id")
  content        String?        @db.Text
  rating         Decimal?
  status         ReviewStatus
  createdAt      DateTime      @default(now()) @map("created_at")

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event          Event         @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transaction    Transactions  @relation(name: "TransactionToReview", fields: [transactionId], references: [id]) // ✅ Required relation
  @@map("reviews")
}


model Transactions {
  id                Int               @id @default(autoincrement())
  userId            Int               @map("user_id")
  eventId           Int               @map("event_id")
  couponId          Int?              @map("coupon_id")
  voucherId         Int?              @map("voucher_id")
  transactionStatus TransactionStatus @map("transaction_status")
  paymentProofImage String?           @map("payment_proof_image")
  totalPrice        Int               @map("total_price")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event  Event   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coupon Coupon? @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voucher Voucher? @relation(fields: [voucherId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
 review            Review?  @relation(name: "TransactionToReview") 
  @@map("transactions")
}
